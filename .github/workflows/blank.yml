name: Create PR on Repository Dispatch

on:
  # This workflow is triggered by a 'repository_dispatch' event.
  # You can trigger this manually using a curl command or from another workflow.
  # Example curl command:
  # curl -X POST \
  #   -H "Accept: application/vnd.github.v3+json" \
  #   -H "Authorization: token YOUR_GITHUB_TOKEN" \
  #   https://api.github.com/repos/YOUR_USERNAME/YOUR_REPOSITORY/dispatches \
  #   -d '{"event_type":"journey-release", "client_payload":{"packages":"my-package-one@1.0.0,my-package-2@1.0.0"}}'  // or { "my-package-1" : "1.0.0", "my-package-2" : "1.0.0" }
  repository_dispatch:
    types: [journey-release] # Define the event type(s) that will trigger this workflow

jobs:
  context_dump:
    runs-on: ubuntu-latest
    steps:
      - name: Dump Github event
        env:
          EVENT_CONTEXT: ${{ toJson(github.event) }}
        run: echo "$EVENT_CONTEXT"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

        
  create_pull_request:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PR_PAT_TOKEN }}
          
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create a new branch
        id: branch_name
        run: |
          # Get the full repository name (e.g., 'owner/repo-name')
          REPO_FULL_NAME="${{ github.repository }}"
          # Replace '/' with '-' for the branch name part
          BRANCH_SUFFIX=$(echo "$REPO_FULL_NAME" | sed 's/\//-/g')
          # Construct the full branch name
          BRANCH_NAME="feature/$BRANCH_SUFFIX"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Make some changes (example)
        run: |
          # This step demonstrates making a change to a file.
          # Replace this with your actual logic to modify files or generate content.
          echo "This file was updated by a GitHub Actions workflow triggered by repository_dispatch at $(date)." >> generated_content.txt
          echo "Event payload: ${{ github.event }}" >> generated_content.txt

      - name: Commit changes
        run: |
          git add .
          git commit -m "feat: Add generated content via dispatch event" || echo "No changes to commit"

      - name: Push changes
        run: |
          # Push the new branch to the remote repository.
          # Use the GITHUB_TOKEN for authentication.
          git push origin ${{ steps.branch_name.outputs.branch_name }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          # The token used to create the PR. GITHUB_TOKEN is usually sufficient.
          token: ${{ secrets.PR_PAT_TOKEN }}
          # The branch from which the PR will be created.
          head: ${{ steps.branch_name.outputs.branch_name }}
          # The base branch into which the PR will be merged.
          base: main # Or your default branch, e.g., 'master'
          # The title of the pull request.
          title: 'feat: Automated PR from repository_dispatch'
          # The body of the pull request.
          body: |
            This pull request was automatically generated by a GitHub Actions workflow
            triggered by a `repository_dispatch` event.

            **Client Payload Message:** ${{ github.event.client_payload.message }}
          # Set to true to automatically merge the PR if all checks pass and there are no conflicts.
          # automerge: true # TODO: Should we set it based on Event Payload?
          # Set to true to delete the head branch after the PR is merged.
          # delete-branch-after-merge: true
          # Set to true to update the PR if it already exists.
          update-pull-request: true
