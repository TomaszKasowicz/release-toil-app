name: Create PR on Repository Dispatch

on:
  # This workflow is triggered by a 'repository_dispatch' event.
  # You can trigger this manually using a curl command or from another workflow.
  # Example curl command:
  # curl -X POST \
  #   -H "Accept: application/vnd.github.v3+json" \
  #   -H "Authorization: token YOUR_GITHUB_TOKEN" \
  #   https://api.github.com/repos/YOUR_USERNAME/YOUR_REPOSITORY/dispatches \
  #   -d '{"event_type":"journey-release", "client_payload":{"packages":"my-package-one@1.0.0,my-package-2@1.0.0"}}'  // or { "my-package-1" : "1.0.0", "my-package-2" : "1.0.0" }
  repository_dispatch:
    types: [journey-release] # Define the event type(s) that will trigger this workflow
  
  workflow_dispatch:
    inputs:
      client_payload: 
        type: string
        default: '{ "sourceContext": { "repository": "TomaszKasowicz/release-toil-journey", "jiraTicket": "JIRA-12345", "author": "TomaszKasowicz" }, "npmPackages": [ "package1@1.2.3", "package2@1.2.3"] }'

jobs:
  context_dump:
    runs-on: ubuntu-latest
    steps:
      - name: Dump Github event
        run: echo "${{ toJson(github.event) }}"
      - name: Dump GitHub context
        run: echo "${{ toJson(github) }}"
      - name: Dump secrets
        run: echo "${{ toJson(secrets) }}"


  context_dump_scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        uses: actions/github-script@v7
        with:
          script: |
            console.log(context)
        
  create_pull_request:
    runs-on: ubuntu-latest
    env:
      CLIENT_PAYLOAD: ${{ github.event.client_payload }}
      TRUNK_BRANCH: ${{ github.repository.default_branch }}
    steps:
      - name: Override env variables (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "CLIENT_PAYLOAD=${{ inputs.client_payload }}" >> $GITHUB_ENV
          echo "TRUNK_BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.TRUNK_BRANCH }}
          filter: tree:0 # Optional, but recommended: reduce the size of the checkout with tree filtering, see https://github.blog/open-source/git/get-up-to-speed-with-partial-clone-and-shallow-clone/

      - name: Run Github Script (testing payload from dispatch)
        uses: actions/github-script@v7
        env:
          CLIENT_PAYLOAD: ${{ env.CLIENT_PAYLOAD }}
        with:
          script: |
             try {
               const client_payload = JSON.parse(process.env.CLIENT_PAYLOAD) || {};
               console.log('----Client Payload', JSON.stringify(client_payload, null, 2));
             } catch(error) {
               console.log('***** error', error.message);
             }
          
      - name: Get Repository and Branch Name
        if: ${{ steps.cross-check-dependencies.outputs.updated }}
        id: get-repository-and-branch-name
        run: |
          REPOSITORY=$(echo '${{ env.CLIENT_PAYLOAD }}' | jq -r '.sourceContext.repository')
          REPO=$(echo $REPOSITORY | cut -d '/' -f 2)
          BRANCH_NAME="chore/update-packages-${REPO}"
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # - name: Configure Git
      #   run: |
      #     git config user.name "GitHub Actions Bot"
      #     git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # - name: Make some changes (example)
      #   run: |
      #     # This step demonstrates making a change to a file.
      #     # Replace this with your actual logic to modify files or generate content.
      #     echo "This file was updated by a GitHub Actions workflow triggered by repository_dispatch at $(date)." >> generated_content.txt
      #     echo "Event payload: ${{ toJson(github.event) }}" >> generated_content.txt

      #     git checkout ${{ env.BRANCH_NAME }} || git checkout -b ${{ env.BRANCH_NAME }}

      # - name: Commit changes
      #   run: |
      #     git add .
      #     git commit -m "feat: Add generated content via dispatch event" || echo "No changes to commit"

      # - name: Push changes
      #   run: |
      #     # Push the new branch to the remote repository.
      #     # Use the GITHUB_TOKEN for authentication.
      #     git push origin ${{ steps.branch_name.outputs.branch_name }}

      # - name: Create Pull Request
      #   uses: peter-evans/create-pull-request@v7
      #   with:
      #     # The token used to create the PR. GITHUB_TOKEN is usually sufficient.
      #     token: ${{ secrets.PR_PAT_TOKEN }}
      #     # The branch from which the PR will be created.
      #     branch: ${{ steps.branch_name.outputs.branch_name }}
      #     # The base branch into which the PR will be merged.
      #     base: main # Or your default branch, e.g., 'master'
      #     # The title of the pull request.
      #     title: 'feat: update journey versions from ${{ github.event.client_payload.repository }}'
      #     # The body of the pull request.
      #     body: |
      #       This pull request was automatically generated by a GitHub Actions workflow
      #       triggered by a `repository_dispatch` event.

      #       **Client Payload Message:** ${{ toJson(github.event.client_payload) }}

